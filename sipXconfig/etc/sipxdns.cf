# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# Postgres configuration for working with sipxecs
#

bundle agent sipxdns {
  vars:
    "managed_ext" 
      string => "",
      policy => "overridable";
    sipxdns_unmanaged::
      "managed_ext" string => ".unmanaged";

  methods:
    sipxdns::
      "any" usebundle => sipxdns_config;

    resolv::
      "any" usebundle => sipxdns_resolv;

    sipxdns_call_domain::
      "any" usebundle => sipxdns_call_domain;

    !src.!sipxdns_unmanaged::
      "any" usebundle => sipxdns_setup;

    !sipxdns_unmanaged.!fedora16_or_greater::
      "any" usebundle => named_sysv_running;

    !sipxdns_unmanaged.fedora16_or_greater::
      "any" usebundle => named_systemctl_running;
}

bundle agent sipxdns_resolv {
  files:
    any::
      "/etc/resolv.conf$(sipxdns.managed_ext)"
        comment => "add nameservers to $(this.promiser)",
        create => "true",
        perms => m(644),
        edit_line => resolv_conf,
        edit_defaults => std_defs;
}

bundle agent sipxdns_config {
  files:
    any::
      "/etc/named.conf$(sipxdns.managed_ext)"
        comment => "install DNS config file $(this.promiser)",
        create => "true",
        perms => mog(600, "named", "root"),
        edit_defaults => empty,
        transformer => "$(sipx.SIPX_LIBEXECDIR)/sipx-erb --in $(sipx.SIPX_CFDATA)/named.yaml --out $(this.promiser) --template $(sipx.SIPX_CONFDIR)/sipxdns/named.erb",
        classes => if_repaired("reload_named");

      # NOTE: dnsviews is a list of one or more, one for each region
      "/var/named/$(sipx.dnsviews).$(sipx.domain).zone$(sipxdns.managed_ext)"
        comment => "install DNS zone file $(this.promiser)",
        create => "true",
        perms => mog(600, "named", "named"),
        edit_defaults => empty,
        transformer => "$(sipx.SIPX_LIBEXECDIR)/sipx-erb --in $(sipx.SIPX_CFDATA)/$(sipx.dnsviews).yaml --out $(this.promiser) --template $(sipx.SIPX_CONFDIR)/sipxdns/zone.erb",
        classes => if_repaired("reload_named");
}

bundle agent sipxdns_call_domain {
  files:
    any::
      "/etc/named.conf$(sipxdns.managed_ext)"
      comment => "install DNS call zone in named $(this.promiser)",
      create => "false",
      edit_line => named_conf_call_domain,
      classes => if_repaired("update_call_domain_zone");

    update_call_domain_zone::
      "/var/named/call.zone$(sipxdns.managed_ext)"
      comment => "install call domain zone $(this.propmiser)",
      create => "true",
      edit_line => call_domain_zone,
      perms => mog(600, "named", "name"),
      classes => if_repaired("reload_named");
}

bundle edit_line named_conf {
  insert_lines:
    "
options {
    directory  \"/var/named\";
    dump-file \"/var/named/data/cache_dump.db\";
    statistics-file \"/var/named/data/named_stats.txt\";
    allow-query { any; };
    forwarders {
      $(sipx.sipxdns_forwarders)
    };
    empty-zones-enable yes;
};

zone \"$(sipx.domain)\"  IN  {
     type master;
     file \"$(sipx.domain).zone\";
     allow-update { none; };
};
";
}

bundle edit_line named_conf_call_domain {
  insert_lines:
    "
zone \"call\" IN {
    type master;
    file \"call.zone\";
    allow-update { none; };};
";
}

bundle edit_line call_domain_zone {
  insert_lines:
    "
$TTL 1800
call. IN SOA ns1.call. root.call. (
    2013032205 ; serial#
    1800 ; refresh, seconds
    1800 ; retry, seconds
    3d ; expire, seconds
1800 ) ; minimum TTL, seconds

call. IN NS server1.call.

server1.call. IN A 10.10.1.10
";
}

bundle edit_line resolv_conf {
  insert_lines:
    "# Generated by sipXecs ";
    "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/resolv.conf.part"
      insert_type => "file";

  delete_lines:
    ".*";
}

bundle agent sipxdns_setup {
  methods:
    sipxdns::
      "any" usebundle => rh_chkconfig_status("named on");
    !sipxdns::
      "any" usebundle => rh_chkconfig_status("named off");
}

bundle agent named_sysv_running {
  vars:
    any::
      "service" string => "/etc/init.d/named";
      "service_command" string => "/usr/sbin/named";

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)", "named_running", "named");

  commands:
    # NOTE : Not shutting off  explicit stop function because we cannot tell if
    # admin is configuring and managing DNS on their own (which is the 
    # case for a lot of ezuce developers anyway)
    !sipxdns.!src.named_running::
      "$(service)"
        comment => "stop named",
        args => "stop";

    sipxdns.!named_running::
      "$(service)"
        comment => "start named",
        args => "start";

    sipxdns.named_running.restart_named::
      "$(service)"
        comment => "restart named",
        args => "restart";

    sipxdns.named_running.reload_named::
      "$(service)"
        comment => "reload named",
        args => "reload";
}

bundle agent named_systemctl_running {
  vars:
    any::
      "service" string => "named.service";

  classes:
    fedora16_or_greater::
      "named_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    # NOTE : Not shutting off  explicit stop function because we cannot tell if
    # admin is configuring and managing DNS on their own (which is the 
    # case for a lot of ezuce developers anyway)
    !sipxdns.!src.named_running::
      "$(sipx.systemctl)"
        comment => "stop named",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable named",
        args => "disable $(service)";

    sipxdns.!named_running::
      "$(sipx.systemctl)"
        comment => "start named",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable named",
        args => "enable $(service)";

    sipxdns.named_running.restart_named::
      "$(sipx.systemctl)"
        comment => "restart named",
        args => "restart $(service)";

    sipxdns.named_running.reload_named::
      "$(sipx.systemctl)"
        comment => "reload named",
        args => "reload $(service)";
}
